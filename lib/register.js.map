{"version":3,"sources":["../src/register.js"],"names":["query","parse","window","location","search","phase","selectKind","selectStory","searchTargetStories","channel","api","Promise","resolve","reject","results","count","handleCount","handleInit","context","push","length","removeListeners","handleError","error","removeListener","COMPONENT_COUNT","COMPONENT_INIT","COMPONENT_ERROR","on","once","stories","group","story","kind","setTimeout","register","name","getChannel","PREPARE","CAPTURE","setScreenshotStories","COMPONENT_READY","readyComponentScreenshot","Error","failureScreenshot"],"mappings":";;AAAA;;AACA;;AACA;;;;AACA;;;;AACA;;AAKA;;;;;;2cARiD;;;AAWjD,IAAMA,QAAQ,sBAAGC,KAAH,CAASC,OAAOC,QAAP,CAAgBC,MAAzB,CAAd;AACA,IAAMC,QAAQL,MAAM,mBAAN,CAAd;AACA,IAAMM,aAAaN,MAAMM,UAAzB;AACA,IAAMC,cAAcP,MAAMO,WAA1B;;AAGA,IAAMC,sBAAsB,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,GAAV;AAAA,SAAkB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC7E,QAAMC,UAAU,EAAhB;AACA,QAAIC,QAAQ,CAAZ;;AAEA,QAAMC,cAAc,SAAdA,WAAc,GAAM;AACxBD,eAAS,CAAT;AACD,KAFD;;AAIA,QAAME,aAAa,SAAbA,UAAa,CAACC,OAAD,EAAa;AAC9BJ,cAAQK,IAAR,CAAaD,OAAb;;AAEA,UAAIJ,QAAQM,MAAR,IAAkBL,KAAtB,EAA6B;AAC3BM,0BAD2B,CACR;AACnBT,gBAAQE,OAAR;AACD;AACF,KAPD;;AASA,QAAMQ,cAAc,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7BV,aAAOU,KAAP;AACD,KAFD;;AAIA,QAAMF,kBAAkB,SAAlBA,eAAkB,GAAM;AAC5BZ,cAAQe,cAAR,CAAuB,sBAAWC,eAAlC,EAAmDT,WAAnD;AACAP,cAAQe,cAAR,CAAuB,sBAAWE,cAAlC,EAAkDT,UAAlD;AACAR,cAAQe,cAAR,CAAuB,sBAAWG,eAAlC,EAAmDL,WAAnD;AACD,KAJD;;AAMAb,YAAQmB,EAAR,CAAW,sBAAWH,eAAtB,EAAuCT,WAAvC;AACAP,YAAQmB,EAAR,CAAW,sBAAWF,cAAtB,EAAsCT,UAAtC;AACAR,YAAQmB,EAAR,CAAW,sBAAWD,eAAtB,EAAuCL,WAAvC;;AAEAb,YAAQoB,IAAR,CAAa,YAAb,EAA2B,gBAAiB;AAAA,UAAdC,OAAc,QAAdA,OAAc;;AAC1C;AAD0C;AAAA;AAAA;;AAAA;AAE1C,6BAAoBA,OAApB,8HAA6B;AAAA,cAAlBC,KAAkB;AAAA;AAAA;AAAA;;AAAA;AAC3B,kCAAoBA,MAAMD,OAA1B,mIAAmC;AAAA,kBAAxBE,KAAwB;;AACjCtB,kBAAIH,WAAJ,CAAgBwB,MAAME,IAAtB,EAA4BD,KAA5B;AACD;AAH0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAI5B;AACD;AAP0C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQ3C,KARD;;AAUAE,eAAW,YAAM;AACf,UAAInB,UAAU,CAAd,EAAiB;AACfF,eAAO,mCAAP;AACD;AACF,KAJD;AAKD,GA9C6C,CAAlB;AAAA,CAA5B;;AAiDA,iBAAOsB,QAAP,CAAgB,kBAAIC,IAApB;AAAA,sEAA0B,iBAAO1B,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACnBL,KADmB;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAMhBI,mBANgB,GAMN,iBAAO4B,UAAP,EANM;AAAA,0BAQdhC,KARc;AAAA,4CASf,sBAAWiC,OATI,uBAaf,sBAAWC,OAbI;AAAA;;AAAA;AAAA,0BAUZrC,MAVY;AAAA;AAAA,mBAUsBM,oBAAoBC,OAApB,EAA6BC,GAA7B,CAVtB;;AAAA;AAAA;AAAA;AAAA,+BAUL8B,oBAVK;;AAAA;AAAA;;AAAA;AAclB/B,oBAAQmB,EAAR,CAAW,sBAAWa,eAAtB,EAAuC,iBAAqB;AAAA,kBAAlBR,IAAkB,SAAlBA,IAAkB;AAAA,kBAAZD,KAAY,SAAZA,KAAY;;AAC1D,kBAAI1B,eAAe2B,IAAf,IAAuB1B,gBAAgByB,KAA3C,EAAkD;AAChD9B,uBAAOwC,wBAAP;AACD;AACF,aAJD;AAKAhC,gBAAIH,WAAJ,CAAgBD,UAAhB,EAA4BC,WAA5B;AAnBkB;;AAAA;AAAA,kBAsBL,IAAIoC,KAAJ,+BAAsCtC,KAAtC,0BAtBK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAyBtBH,mBAAO0C,iBAAP;;AAzBsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA1B;;AAAA;AAAA;AAAA;AAAA","file":"register.js","sourcesContent":["import 'babel-polyfill';\r\nimport { getStorybook } from '@storybook/react'; // eslint-disable-line\r\nimport addons from '@storybook/addons';\r\nimport qs from 'query-string';\r\nimport {\r\n  PhaseTypes,\r\n  EventTypes,\r\n  SEARCH_COMPONENT_TIMEOUT,\r\n} from './constants';\r\nimport pkg from '../package.json';\r\n\r\n\r\nconst query = qs.parse(window.location.search);\r\nconst phase = query['chrome-screenshot'];\r\nconst selectKind = query.selectKind;\r\nconst selectStory = query.selectStory;\r\n\r\n\r\nconst searchTargetStories = (channel, api) => new Promise((resolve, reject) => {\r\n  const results = [];\r\n  let count = 0;\r\n\r\n  const handleCount = () => {\r\n    count += 1;\r\n  };\r\n\r\n  const handleInit = (context) => {\r\n    results.push(context);\r\n\r\n    if (results.length >= count) {\r\n      removeListeners(); // eslint-disable-line no-use-before-define\r\n      resolve(results);\r\n    }\r\n  };\r\n\r\n  const handleError = (error) => {\r\n    reject(error);\r\n  };\r\n\r\n  const removeListeners = () => {\r\n    channel.removeListener(EventTypes.COMPONENT_COUNT, handleCount);\r\n    channel.removeListener(EventTypes.COMPONENT_INIT, handleInit);\r\n    channel.removeListener(EventTypes.COMPONENT_ERROR, handleError);\r\n  };\r\n\r\n  channel.on(EventTypes.COMPONENT_COUNT, handleCount);\r\n  channel.on(EventTypes.COMPONENT_INIT, handleInit);\r\n  channel.on(EventTypes.COMPONENT_ERROR, handleError);\r\n\r\n  channel.once('setStories', ({ stories }) => {\r\n    /* eslint-disable no-restricted-syntax */\r\n    for (const group of stories) {\r\n      for (const story of group.stories) {\r\n        api.selectStory(group.kind, story);\r\n      }\r\n    }\r\n    /* eslint-enable */\r\n  });\r\n\r\n  setTimeout(() => {\r\n    if (count === 0) {\r\n      reject('The target stories was not found.');\r\n    }\r\n  }, SEARCH_COMPONENT_TIMEOUT);\r\n});\r\n\r\n\r\naddons.register(pkg.name, async (api) => {\r\n  if (!phase) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const channel = addons.getChannel();\r\n\r\n    switch (phase) {\r\n      case PhaseTypes.PREPARE:\r\n        await window.setScreenshotStories(await searchTargetStories(channel, api));\r\n        return;\r\n\r\n      case PhaseTypes.CAPTURE:\r\n        channel.on(EventTypes.COMPONENT_READY, ({ kind, story }) => {\r\n          if (selectKind === kind && selectStory === story) {\r\n            window.readyComponentScreenshot();\r\n          }\r\n        });\r\n        api.selectStory(selectKind, selectStory);\r\n        break;\r\n\r\n      default: throw new Error(`An unknown phase called \"${phase}\" is being executed.`);\r\n    }\r\n  } catch (e) {\r\n    window.failureScreenshot(e);\r\n  }\r\n});\r\n"]}