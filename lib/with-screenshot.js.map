{"version":3,"sources":["../src/with-screenshot.js"],"names":["countupIgnore","withScreenshot","options","storyFn","ctx","useDecorator","channel","getChannel","wrapperWithContext","context","props","err","emit","COMPONENT_ERROR","Error","indexOf","kind","story","COMPONENT_COUNT","push"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA,IAAMA,gBAAgB,EAAtB;;AAEA,IAAMC,iBAAiB,SAAjBA,cAAiB;AAAA,MAACC,OAAD,uEAAW,EAAX;AAAA,SAAkB,UAACC,OAAD,EAAUC,GAAV,EAAkB;AACzD,QAAMC,eAAe,CAAC,CAACD,GAAvB;AACA,QAAME,UAAU,iBAAOC,UAAP,EAAhB;;AAEA,QAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,OAAD,EAAa;AACtC,UAAMC,qBACD,+CAAuBR,OAAvB,CADC;AAEJI,wBAFI;AAGJG;AAHI,QAAN;;AAMA,aACE;AAAA;AAAuBC,aAAvB;AACGP,gBAAQM,OAAR;AADH,OADF;AAKD,KAZD;;AAcA,QAAI,OAAON,OAAP,KAAmB,UAAvB,EAAmC;AACjC,UAAMQ,qDAAmD,2BAAOR,OAAP,CAAnD,OAAN;AACAG,cAAQM,IAAR,CAAa,sBAAWC,eAAxB,EAAyCF,GAAzC,EAFiC,CAEc;AAC/C,YAAM,IAAIG,KAAJ,CAAUH,GAAV,CAAN,CAHiC,CAGX;AACvB;;AAED,QAAI,CAACN,YAAD,IAAiBL,cAAce,OAAd,CAAsBX,IAAIY,IAAJ,GAAWZ,IAAIa,KAArC,IAA8C,CAAnE,EAAsE;AACpEX,cAAQM,IAAR,CAAa,sBAAWM,eAAxB;AACD;;AAED,QAAIb,YAAJ,EAAkB;AAChBL,oBAAcmB,IAAd,CAAmBf,IAAIY,IAAJ,GAAWZ,IAAIa,KAAlC;AACA,aAAOT,mBAAmBJ,GAAnB,CAAP;AACD;;AAED,WAAO;AAAA,aACLI,mBAAmBC,OAAnB,CADK;AAAA,KAAP;AAGD,GApCsB;AAAA,CAAvB;;kBAsCeR,c","file":"with-screenshot.js","sourcesContent":["import React from 'react';\r\nimport addons from '@storybook/addons';\r\nimport insect from 'util-inspect';\r\nimport { EventTypes } from './constants';\r\nimport { mergeScreenshotOptions } from './screenshot-options';\r\nimport ScreenshotWrapper from './components/ScreenshotWrapper';\r\n\r\n// There is a case where the count is doubly increment\r\n// when using `addDecorator` to the first component.\r\n// As a workaround, use `countupIgnore` to control the story\r\n// counted once so that it will not count again.\r\nconst countupIgnore = [];\r\n\r\nconst withScreenshot = (options = {}) => (storyFn, ctx) => {\r\n  const useDecorator = !!ctx;\r\n  const channel = addons.getChannel();\r\n\r\n  const wrapperWithContext = (context) => {\r\n    const props = {\r\n      ...mergeScreenshotOptions(options),\r\n      channel,\r\n      context,\r\n    };\r\n\r\n    return (\r\n      <ScreenshotWrapper {...props}>\r\n        {storyFn(context)}\r\n      </ScreenshotWrapper>\r\n    );\r\n  };\r\n\r\n  if (typeof storyFn !== 'function') {\r\n    const err = `The story may not be correct, (storyFn = \"${insect(storyFn)}\")`;\r\n    channel.emit(EventTypes.COMPONENT_ERROR, err); // For Puppeteer\r\n    throw new Error(err); // For browser\r\n  }\r\n\r\n  if (!useDecorator || countupIgnore.indexOf(ctx.kind + ctx.story) < 0) {\r\n    channel.emit(EventTypes.COMPONENT_COUNT);\r\n  }\r\n\r\n  if (useDecorator) {\r\n    countupIgnore.push(ctx.kind + ctx.story);\r\n    return wrapperWithContext(ctx);\r\n  }\r\n\r\n  return context => (\r\n    wrapperWithContext(context)\r\n  );\r\n};\r\n\r\nexport default withScreenshot;\r\n"]}