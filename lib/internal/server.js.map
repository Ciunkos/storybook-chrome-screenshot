{"version":3,"sources":["../../src/internal/server.js"],"names":["StorybookServer","server","url","query","getURL","stringify","kill","optionsToCommandArgs","options","args","port","configDir","host","push","staticDir","startStorybookServer","logger","Promise","resolve","reject","cmd","cwd","storybook","stdout","on","out","str","toString","trim","m","match","s","stderr","log","err"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;IAGMA,e;AACJ,2BAAYC,MAAZ,EAAoBC,GAApB,EAAyB;AAAA;;AACvB,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWA,GAAX;AACD;;;;6BAEQ;AACP,aAAO,KAAKA,GAAZ;AACD;;;8BAESC,K,EAAO;AACf,kBAAU,KAAKC,MAAL,EAAV,IAA0BD,cAAY,sBAAGE,SAAH,CAAaF,KAAb,CAAZ,GAAoC,EAA9D;AACD;;;2BAEM;AACL,WAAKF,MAAL,CAAYK,IAAZ;AACD;;;;;;AAIH,IAAMC,uBAAuB,SAAvBA,oBAAuB,CAACC,OAAD,EAAa;AACxC,MAAMC,OAAO,CACX,IADW,EACLD,QAAQE,IADH,EAEX,IAFW,EAELF,QAAQG,SAFH,CAAb;;AAKA,MAAIH,QAAQI,IAAZ,EAAkB;AAChBH,SAAKI,IAAL,CAAU,IAAV,EAAgBL,QAAQI,IAAxB;AACD;;AAED,MAAIJ,QAAQM,SAAZ,EAAuB;AACrBL,SAAKI,IAAL,CAAU,IAAV,EAAgBL,QAAQM,SAAxB;AACD;;AAED,SAAOL,IAAP;AACD,CAfD;;AAiBA,IAAMM,uBAAuB,SAAvBA,oBAAuB,CAACP,OAAD,EAAUQ,MAAV;AAAA,SAAqB,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA,QACzEC,GADyE,GAC5DZ,OAD4D,CACzEY,GADyE;AAAA,QACpEC,GADoE,GAC5Db,OAD4D,CACpEa,GADoE;;AAEjF,QAAMZ,OAAOF,qBAAqBC,OAArB,CAAb;AACA,QAAMc,YAAY,0BAAMF,GAAN,EAAWX,IAAX,EAAiB,EAAEY,QAAF,EAAjB,CAAlB;;AAEAC,cAAUC,MAAV,CAAiBC,EAAjB,CAAoB,MAApB,EAA4B,UAACC,GAAD,EAAS;AACnC,UAAMC,MAAMD,IAAIE,QAAJ,GAAeC,IAAf,EAAZ;AACA,UAAMC,IAAIH,IAAII,KAAJ,CAAU,2CAAV,CAAV;;AAEA,UAAID,CAAJ,EAAO;AACL,YAAME,IAAI,IAAI/B,eAAJ,CAAoBsB,SAApB,EAA+BO,EAAE,CAAF,CAA/B,CAAV;AACAX,gBAAQa,CAAR;AACD;AACF,KARD;;AAUAT,cAAUU,MAAV,CAAiBR,EAAjB,CAAoB,MAApB,EAA4B,UAACC,GAAD,EAAS;AACnCT,aAAOiB,GAAP,CAAW,QAAX,EAAqBR,IAAIE,QAAJ,EAArB;AACD,KAFD;;AAIAL,cAAUE,EAAV,CAAa,OAAb,EAAsB,UAACU,GAAD,EAAS;AAC7Bf,aAAOe,IAAIP,QAAJ,EAAP;AACD,KAFD;AAGD,GAtBiD,CAArB;AAAA,CAA7B;;kBAyBeZ,oB","file":"server.js","sourcesContent":["import { spawn } from 'child_process';\r\nimport qs from 'query-string';\r\n\r\n\r\nclass StorybookServer {\r\n  constructor(server, url) {\r\n    this.server = server;\r\n    this.url = url;\r\n  }\r\n\r\n  getURL() {\r\n    return this.url;\r\n  }\r\n\r\n  createURL(query) {\r\n    return `${this.getURL()}${query ? `?${qs.stringify(query)}` : ''}`;\r\n  }\r\n\r\n  kill() {\r\n    this.server.kill();\r\n  }\r\n}\r\n\r\n\r\nconst optionsToCommandArgs = (options) => {\r\n  const args = [\r\n    '-p', options.port,\r\n    '-c', options.configDir,\r\n  ];\r\n\r\n  if (options.host) {\r\n    args.push('-h', options.host);\r\n  }\r\n\r\n  if (options.staticDir) {\r\n    args.push('-s', options.staticDir);\r\n  }\r\n\r\n  return args;\r\n};\r\n\r\nconst startStorybookServer = (options, logger) => new Promise((resolve, reject) => {\r\n  const { cmd, cwd } = options;\r\n  const args = optionsToCommandArgs(options);\r\n  const storybook = spawn(cmd, args, { cwd });\r\n\r\n  storybook.stdout.on('data', (out) => {\r\n    const str = out.toString().trim();\r\n    const m = str.match(/^Storybook started on => (https?:\\/\\/.+)$/);\r\n\r\n    if (m) {\r\n      const s = new StorybookServer(storybook, m[1]);\r\n      resolve(s);\r\n    }\r\n  });\r\n\r\n  storybook.stderr.on('data', (out) => {\r\n    logger.log('STDERR', out.toString());\r\n  });\r\n\r\n  storybook.on('error', (err) => {\r\n    reject(err.toString());\r\n  });\r\n});\r\n\r\n\r\nexport default startStorybookServer;\r\n"]}