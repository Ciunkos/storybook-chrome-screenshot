{"version":3,"sources":["../src/cli.js"],"names":["path","fs","version","usage","option","parse","process","argv","logger","silent","debug","exit","message","code","error","bin","encoding","trim","options","port","host","staticDir","configDir","outputDir","filterKind","filterStory","browserTimeout","parallel","injectFiles","cwd","resolve","cmd","config","existsSync","store","server","browser","progressbar","close","kill","section","LAUNCH","log","Promise","all","launch","args","map","newPage","page","emitter","on","exposeFunction","index","emit","COMPONENT_READY","getStories","clear","goto","phase","query","createURL","full","timeout","takeScreenshot","setViewport","story","viewport","CAPTURE","selectKind","kind","selectStory","once","file","join","filename","injectFile","filePath","screenshot","expose","fn","pages","firstPage","PREPARE","takeScreenshotOfStories","stories","Math","min","length","chunkSize","max","ceil","chunkedStories","arr","i","JSON","stringify","tick","doneAllComponentScreenshot","terminate","DONE","blank","skippedStories","getSkippedStories","forEach","echo","success","warning","yellow","results","setStories","emojify","complete","incomplete","width","total"],"mappings":"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","file":"cli.js","sourcesContent":["\r\n\r\nimport * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport { EventEmitter } from 'events';\r\nimport { execSync } from 'child_process';\r\nimport 'babel-polyfill';\r\nimport program from 'commander';\r\nimport emoji from 'node-emoji';\r\nimport logSymbols from 'log-symbols';\r\nimport chalk from 'chalk';\r\nimport ProgressBar from 'progress';\r\nimport puppeteer from 'puppeteer';\r\nimport mkdirp from 'mkdirp';\r\nimport pkg from '../package.json';\r\nimport Store from './internal/store';\r\nimport startStorybookServer from './internal/server';\r\nimport {\r\n  PhaseTypes,\r\n  EventTypes,\r\n} from './constants';\r\nimport {\r\n  identity,\r\n  parseInteger,\r\n  parseList,\r\n  parseRegExp,\r\n  createArray,\r\n  arrayChunk,\r\n} from './internal/utils';\r\nimport Logger from './internal/logger';\r\n\r\n\r\nprogram\r\n  .version(pkg.version)\r\n  .usage('[options]')\r\n  .option('-p, --port [number]', 'Storybook server port (Default 9001)', parseInteger, 9001)\r\n  .option('-h, --host [string]', 'Storybook server host (Default \"localhost\")', identity, 'localhost')\r\n  .option('-s, --static-dir <dir-names>', 'Directory where to load static files from', parseList)\r\n  .option('-c, --config-dir [dir-name]', 'Directory where to load Storybook configurations from (Default \".storybook\")', identity, '.storybook')\r\n  .option('-o, --output-dir [dir-name]', 'Directory where screenshot images are saved (Default \"__screenshots__\")', identity, '__screenshots__')\r\n  .option('--parallel [number]', 'Number of Page Instances of Puppeteer to be activated when shooting screenshots (Default 4)', parseInteger, 4)\r\n  .option('--filter-kind [regexp]', 'Filter of kind with RegExp. (Example \"Button$\")', parseRegExp)\r\n  .option('--filter-story [regexp]', 'Filter of story with RegExp. (Example \"^with\\\\s.+$\")', parseRegExp)\r\n  .option('--inject-files <file-names>', 'Path to the JavaScript file to be injected into frame. (Default \"\")', parseList, [])\r\n  .option('--browser-timeout [number]', 'Timeout milliseconds when Puppeteer opens Storybook. (Default 30000)', parseInteger, 30000)\r\n  .option('--silent', 'Suppress standard output', identity, false)\r\n  .option('--debug', 'Enable debug mode.', identity, false)\r\n  .parse(process.argv);\r\n\r\n\r\nconst logger = new Logger(program.silent, program.debug);\r\n\r\nconst exit = (message, code = 1) => {\r\n  logger.error(message);\r\n  process.exit(code);\r\n};\r\n\r\nconst bin = execSync('echo $(npm bin)', { encoding: 'utf-8' }).trim();\r\n\r\nconst options = {\r\n  port: program.port,\r\n  host: program.host,\r\n  staticDir: program.staticDir,\r\n  configDir: program.configDir,\r\n  outputDir: program.outputDir,\r\n  filterKind: program.filterKind,\r\n  filterStory: program.filterStory,\r\n  browserTimeout: program.browserTimeout,\r\n  parallel: program.parallel,\r\n  injectFiles: program.injectFiles,\r\n  debug: program.debug,\r\n  cwd: path.resolve(bin, '..', '..'),\r\n  cmd: path.resolve(bin, 'start-storybook'),\r\n};\r\n\r\nconst config = path.resolve(options.cwd, options.configDir, 'config.js');\r\n\r\nif (!fs.existsSync(options.cmd)) {\r\n  exit(`Storybook does not exists. First, let's setup a Storybook!\r\n    See: https://storybook.js.org/basics/quick-start-guide/`);\r\n}\r\n\r\nif (!fs.existsSync(config)) {\r\n  exit(`\"${options.configDir}/config.js\" does not exists.`);\r\n}\r\n\r\n\r\n(async () => {\r\n  const store = new Store(options.filterKind, options.filterStory);\r\n  let server;\r\n  let browser;\r\n  let progressbar;\r\n\r\n  const close = () => {\r\n    if (server) server.kill();\r\n    if (browser) browser.close();\r\n  };\r\n\r\n  try {\r\n    logger.section('green', PhaseTypes.LAUNCH, 'Launching storybook server...', true);\r\n\r\n    logger.log('NODE', 'Inject files, ', options.injectFiles);\r\n    logger.log('NODE', `Filter of kind and story, (kind = ${options.filterKind}, story = ${options.filterStory})`);\r\n\r\n    [server, browser] = await Promise.all([\r\n      startStorybookServer(options, logger),\r\n      puppeteer.launch({ args: ['--no-sandbox', '--disable-setuid-sandbox'] }),\r\n    ]);\r\n\r\n    const pages = await Promise.all(createArray(options.parallel).map(async () => {\r\n      const page = await browser.newPage();\r\n      const emitter = new EventEmitter();\r\n\r\n      page.on('console', (...args) => {\r\n        logger.log('BROWSER', ...args);\r\n      });\r\n\r\n      await page.exposeFunction('readyComponentScreenshot', (index) => {\r\n        emitter.emit(EventTypes.COMPONENT_READY, index);\r\n      });\r\n\r\n      await page.exposeFunction('getScreenshotStories', () => (\r\n        store.getStories()\r\n      ));\r\n\r\n      await page.exposeFunction('failureScreenshot', (error) => {\r\n        logger.clear();\r\n        close();\r\n        exit(error);\r\n      });\r\n\r\n      const goto = (phase, query = {}) => (\r\n        page.goto(server.createURL({\r\n          ...query,\r\n          full: 1,\r\n          'chrome-screenshot': phase,\r\n        }, {\r\n          timeout: options.browserTimeout,\r\n        }))\r\n      );\r\n\r\n      const takeScreenshot = story => new Promise(async (resolve) => {\r\n        await page.setViewport(story.viewport);\r\n        await goto(PhaseTypes.CAPTURE, {\r\n          selectKind: story.kind,\r\n          selectStory: story.story,\r\n        });\r\n\r\n        emitter.once(EventTypes.COMPONENT_READY, async () => {\r\n          const file = path.join(options.outputDir, story.filename);\r\n\r\n          await Promise.all(options.injectFiles.map(filePath => (\r\n            page.injectFile(filePath)\r\n          )));\r\n\r\n          await page.screenshot({\r\n            path: path.resolve(options.cwd, file),\r\n          });\r\n\r\n          resolve(file);\r\n        });\r\n      });\r\n\r\n      return {\r\n        page,\r\n        goto,\r\n        takeScreenshot,\r\n        exposeFunction: (expose, fn) => page.exposeFunction(expose, fn),\r\n      };\r\n    }));\r\n\r\n    const firstPage = pages[0];\r\n\r\n    logger.section('cyan', PhaseTypes.PREPARE, 'Fetching the target components...', true);\r\n\r\n    const takeScreenshotOfStories = async () => {\r\n      const stories = store.getStories();\r\n      const parallel = Math.min(stories.length, options.parallel);\r\n      const chunkSize = Math.max(1, Math.ceil(stories.length / parallel));\r\n      const chunkedStories = arrayChunk(stories, chunkSize);\r\n\r\n      await Promise.all(chunkedStories.map(async (arr, i) => {\r\n        const page = pages[i];\r\n\r\n        /* eslint-disable no-restricted-syntax, no-await-in-loop */\r\n        for (const story of arr) {\r\n          const file = await page.takeScreenshot(story);\r\n\r\n          logger.log(\r\n            'NODE',\r\n            `Saved to \"${file}\".\r\n    kind: \"${story.kind}\"\r\n    story: \"${story.story}\"\r\n    viewport: \"${JSON.stringify(story.viewport)}\"`,\r\n          );\r\n\r\n          if (progressbar) {\r\n            progressbar.tick();\r\n          }\r\n        }\r\n        /* eslint-enable */\r\n      }));\r\n\r\n      doneAllComponentScreenshot(); // eslint-disable-line no-use-before-define\r\n    };\r\n\r\n    const doneAllComponentScreenshot = async () => {\r\n      if (progressbar) {\r\n        progressbar.terminate();\r\n      }\r\n\r\n      logger.section('cyan', PhaseTypes.DONE, 'Screenshot image saving is completed!');\r\n      logger.blank();\r\n\r\n      const stories = store.getStories();\r\n      const skippedStories = store.getSkippedStories();\r\n\r\n      stories.forEach(({ filename }) => {\r\n        logger.echo(`  ${logSymbols.success}  ${filename}`);\r\n      });\r\n\r\n      skippedStories.forEach(({ filename }) => {\r\n        logger.echo(`  ${logSymbols.warning}  ${filename} ${chalk.yellow('(skipped)')}`);\r\n      });\r\n\r\n      logger.blank(2);\r\n\r\n      close();\r\n      process.exit(0);\r\n    };\r\n\r\n    await firstPage.exposeFunction('setScreenshotStories', (results) => {\r\n      store.setStories(results);\r\n      mkdirp(options.outputDir);\r\n\r\n      const stories = store.getStories();\r\n      const skippedStories = store.getSkippedStories();\r\n\r\n      logger.section('yellow', PhaseTypes.CAPTURE, 'Capturing component screenshots...');\r\n      logger.blank();\r\n      logger.log('NODE', `Fetched stories ${JSON.stringify(stories, null, '  ')}`);\r\n      logger.log('NODE', `Skipped stories ${JSON.stringify(skippedStories, null, '  ')}`);\r\n\r\n      if (!logger.silent && !logger.debug) {\r\n        progressbar = new ProgressBar(emoji.emojify(':camera:  [:bar] :current/:total'), {\r\n          complete: '=',\r\n          incomplete: ' ',\r\n          width: 40,\r\n          total: stories.length,\r\n        });\r\n      }\r\n\r\n      takeScreenshotOfStories();\r\n    });\r\n\r\n    await firstPage.goto(PhaseTypes.PREPARE);\r\n  } catch (e) {\r\n    close();\r\n    exit(e);\r\n  }\r\n})();\r\n"]}